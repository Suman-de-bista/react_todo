{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LA2DeA,MAzDf,SAAkBC,GACd,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAM,IAAjE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAACC,GAClBP,EAASO,EAAEC,OAAOV,QAatB,OACI,sBAAMW,UAAY,YAAYC,SAVb,SAACH,GAClBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAEVC,EAAS,KAGT,SACKL,EAAME,KACP,qCACA,uBACAoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,kBACVW,SAAUd,EACVe,IAAOpB,IAEP,wBAAQQ,UAAU,cAAlB,uBAIA,qCACA,uBAAOQ,KAAK,OACZC,YAAY,cACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,kBACVW,SAAUd,EACVe,IAAOpB,IAEP,wBAAQQ,UAAU,cAAlB,6B,eCRGa,MAtCf,YAA6D,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,aAAaC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAC3C,EAAuB9B,mBAAS,CAC5BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAY8B,EAAZ,KAaA,OAAG9B,EAAKe,GACC,cAAC,EAAD,CAAUf,KAAQA,EAAMa,SATZ,SAAAZ,GACnB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACNf,GAAI,KACJd,MAAO,QAOJyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACjB,sBACErB,UAAWoB,EAAKE,WAAa,oBAAsB,WADrD,UAIE,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACGiB,EAAKb,MADEa,EAAKjB,IAGR,sBAAKH,UAAU,QAAf,UACA,cAAC,IAAD,CACAuB,QAAS,kBAAKP,EAAWI,EAAKjB,KAC9BH,UAAU,gBAEP,cAAC,IAAD,CACAuB,QAAS,kBAAML,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QACjDP,UAAU,oBAZfqB,OC0BIG,MA/Cf,WACI,MAA0BrC,mBAAS,IAAnC,mBAAO2B,EAAP,KAAcW,EAAd,KAqCA,OACI,gCACI,4DACA,cAAC,EAAD,CAAUxB,SAtCF,SAACmB,GACb,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKM,MAAnC,CAIA,IAAMC,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OAgCL,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAdP,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKjB,KAAOA,IACXiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAO6CZ,WApBvC,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KAExDsB,EAASI,IAiBuEZ,WA7BjE,SAACc,EAAQC,GACnBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAI5CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCN5DC,MAbf,WACE,OACE,qCACA,qBAAKnC,UAAU,WAAf,SACE,cAAC,EAAD,MAED,qBAAKA,UAAU,aAAf,yCCLLoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,W","file":"static/js/main.eded86bb.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value:'' );\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(() =>{\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = (e) =>{\r\n        setInput(e.target.value)\r\n        \r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        })\r\n        setInput('');\r\n    }\r\n    return (\r\n        <form className = \"todo-form\" onSubmit= {handleSubmit} >\r\n            {props.edit ? (\r\n            <>\r\n            <input \r\n            type=\"text\" \r\n            placeholder=\"Update your item\" \r\n            value={input}  \r\n            name=\"text\" \r\n            className=\"todo-input edit\" \r\n            onChange={handleChange}\r\n            ref = {inputRef}\r\n            />\r\n            <button className=\"todo-button\">Update</button>\r\n            </>\r\n            ):\r\n            (\r\n            <>\r\n            <input type=\"text\" \r\n            placeholder=\"Add a To-Do\" \r\n            value={input}  \r\n            name=\"text\" \r\n            className=\"todo-input edit\" \r\n            onChange={handleChange}\r\n            ref = {inputRef}\r\n            />\r\n            <button className=\"todo-button\">Add To-Do</button>\r\n            </>\r\n            )           \r\n        }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React,{useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti'\r\n\r\nfunction Todo({todos, completeTodo,removeTodo, updateTodo}) {\r\n    const [edit,setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    })\r\n\r\n    const submitUpdate = value =>{\r\n      updateTodo(edit.id, value)\r\n      setEdit({\r\n        id: null,\r\n        value: ''\r\n      })\r\n    }\r\n\r\n    if(edit.id){\r\n      return <TodoForm edit = {edit} onSubmit = {submitUpdate} />\r\n    }\r\n    return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n             <div className=\"icons\">\r\n             <RiCloseCircleLine \r\n             onClick={()=> removeTodo(todo.id)}\r\n             className='delete-icon'\r\n             />\r\n                <TiEdit \r\n                onClick={() => setEdit({id: todo.id, value: todo.text})}\r\n                className='edit-icons'\r\n                />\r\n            </div> \r\n        </div>\r\n    ))}\r\n\r\nexport default Todo;\r\n","import React,{useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([])\r\n\r\n    const addTodo = (todo) =>{\r\n        if(!todo.text || /^\\s*$/.test(todo.test)){\r\n            return\r\n        }\r\n\r\n        const newTodos = [todo, ...todos]\r\n\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) =>{\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)){\r\n            return;\r\n        }\r\n        \r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\r\n        );\r\n    }\r\n\r\n    const removeTodo = id =>{\r\n        const removeArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo=>{\r\n            if(todo.id === id){\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        })\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the Plan for Today?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos} completeTodo = {completeTodo} removeTodo = {removeTodo} updateTodo = {updateTodo}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport TodoList from './components/TodoList.js';\n\nfunction App() {\n  return (\n    <>\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n     <div className='created-by'>\n        Created By: Suman Bista\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}